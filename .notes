Resources:
The Command Line Crash Course
http://cli.learncodethehardway.org/book/

Markdown Syntax
http://daringfireball.net/projects/markdown/syntax

Flat UI Colors
https://flatuicolors.com/
  Good use of flat ui colors
  https://usepanda.com/

The world’s most advanced web editor
https://pagecloud.com/

Team Treehouse (Learn programming and design)
https://teamtreehouse.com/

Free Bootstrap Themes & Templates
http://startbootstrap.com/

DNSimple
https://dnsimple.com/ (use link: https://dnsimple.com/o/one-month-rails for discount)

Deploying Multiple Environments on Heroku
http://thejqr.com/2009/04/25/deploying-multiple-environments-on-heroku.html

Pushing local to Heroku master
$ git push heroku yourbranch:master

List of Heroku tasks, with heroku_san
https://github.com/fastestforward/heroku_san
  rake heroku:addons                # Install addons for the application.
  rake heroku:addons:local          # List configured addons, without installing them
  rake heroku:apps                  # Lists configured apps
  rake heroku:apps:local            # Lists configured apps without hitting heroku
  rake heroku:config                # Add config:vars to each application.
  rake heroku:config:list           # Lists config variables as set on Heroku
  rake heroku:config:list:local     # Lists local config variables without setting them
  rake heroku:config:rack_env       # Add proper RACK_ENV to each application
  rake heroku:console               # Opens a remote console
  rake heroku:create                # Creates the Heroku app
  rake heroku:create_config         # Creates an example configuration file
  rake heroku:db:migrate            # Migrates and restarts remote servers
  rake heroku:db:pull               # Pull database from stage to local dev database
  rake heroku:deploy[commit]        # Pushes the given commit, migrates and restarts (default: HEAD)
  rake heroku:deploy:after          # Callback after deploys
  rake heroku:deploy:before         # Callback before deploys
  rake heroku:deploy:force[commit]  # Force-pushes the given commit, migrates and restarts (default: HEAD)
  rake heroku:logs                  # Shows the Heroku logs
  rake heroku:logs:tail             # Tail the Heroku logs (requires logging:expanded)
  rake heroku:maintenance           # Enable maintenance mode
  rake heroku:maintenance_off       # Disable maintenance mode
  rake heroku:maintenance_on        # Enable maintenance mode
  rake heroku:push[commit]          # Pushes the given commit (default: HEAD)
  rake heroku:push:force[commit]    # Force-pushes the given commit (default: HEAD)
  rake heroku:rake[task]            # Runs a rake task remotely
  rake heroku:remotes               # Add git remotes for all apps in this project
  rake heroku:restart               # Restarts remote servers
  rake heroku:shell                 # Opens a bash shell within app
  rake heroku:stage:all             # Select all Heroku apps for later command


==================================================

Day 4 Lesson 1 Commit with Git
git checkout -f == git checkout -- .

Day 14 Lesson 2 Setting up Devise
application.html.erb
<% flash.each do |name, msg| %>
     <%= content_tag(:div, msg, class: "alert alert-#{name}") %>
<% end %>

Day 18 Lesson 1 Twerking Devise Views
http://www.peoplecancode.com/en/paths/4/tutorials/23

Let's change the header of the page "Sign up" to "Register"
app/views/users/registrations/new.html.erb

<h2>Register</h2>

Now, if you logout and try to register, you would expect to see the new title of the page "Register." However, you will still see "Sign up." This is because we need to adjust the configuration of Devise. Go to config/initializers/devise.rb and look for the line:

config/initializers/devise.rb

  # config.scoped_views = false

uncomment the line and change to "true":

  config.scoped_views = true

Restart your application using rails server in your terminal and go to registration page again. You will see the "Register" title this time.

# For white params
app/controllers/application_controller.rb

class ApplicationController < ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception

  before_filter :configure_permitted_parameters, if: :devise_controller?

  protected
  
    def configure_permitted_parameters
      devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:name, :email, :password) }
      devise_parameter_sanitizer.for(:account_update) { |u| u.permit(:name, :email, :password, :current_password, :is_female, :date_of_birth) }
    end
end

  before_action :update_sanitized_params, if: :devise_controller?

  def update_sanitized_params
    devise_parameter_sanitizer.for(:account_update) do |u|
      u.permit(:email, :password, :password_confirmation,
               :current_password, blog_attributes: [:url])
    end
  end

Day 22 Lesson 1 Pins Users and Associations
$ rails generate migration add_user_id_to_pins user_id:integer:index
My own: $ rails g migration AddUserIdToPins user:references

Day 23 Lesson 1 Authorization: Who can? Who can't?
app/views/pins/index.html.erb
<%= pin.user.email if pin.user %>, show only if that pin has an associated user
<%= pin.user.try(:email) %>, show all, but don't throw up exception if pin does not have associated user

Day 24 Lesson 2 Image Upload with Paperclip
class Pin < ActiveRecord::Base

  has_attached_file :image, :styles => { :large => "600x600", :medium => "300x300>", :thumb => "100x100>" }, :default_url => "missing_:style.png"
  # instead of :default_url => "/images/:style/missing.png"

end

Day 26 Lesson 1 Styling our app with jQuery Masonry
http://masonry.desandro.com/
https://github.com/kristianmandrup/masonry-rails
https://github.com/kossnocorp/jquery.turbolinks
Faster page loads with Turbolinks
https://coderwall.com/p/ypzfdw/faster-page-loads-with-turbolinks

Day 29 Lesson 2 Pagination with will_paginate and will_paginate-bootstrap
gem 'will_paginate'
gem 'will_paginate-bootstrap'
Pin.all.paginate(:page => params[:page], :per_page => 8)
<div class="center">
   <%= will_paginate @pins, renderer: BootstrapPagination::Rails %>
</div>

Day 30 Lesson 2 Adding validations
# Creates an association to pins for a user
let(:user) { create(:user, pins: [pin]) }

# Alternative to pin factory
http://stackoverflow.com/questions/24355501/using-factorygirls-attributes-for-with-paperclip-attachment
FactoryGirl.define do
  factory :pin do
    # image Rack::Test::UploadedFile.new("#{Rails.root}/spec/fixtures/images/minimum.jpg", "image/jpg")
    image { fixture_file_upload( File.join(Rails.root, 'spec', 'fixtures', 'images', 'minimum.jpg'), 'image/jpeg') }
    # From 
    # http://stackoverflow.com/questions/3294824/how-do-i-use-factory-girl-to-generate-a-paperclip-attachment
    # avatar { File.new(Rails.root.join('app', 'assets', 'images', 'rails.png')) }
    # avatar { File.new("#{Rails.root}/spec/support/fixtures/image.jpg") } 
    # avatar { fixture_file_upload(Rails.root.join('spec', 'photos', 'test.png'), 'image/png') }
  end
end

++++++++++++++++++++++++++++++++++++++++++++++++++

SElF-ENCHANCEMENTS

- Show username on navbar after login
- Add commenting on pins and users

Social Media Colours – Hex and RGB Colours of the Web
http://designpieces.com/2012/12/social-media-colours-hex-and-rgb/

Initial navbar color used #2c3e50
Tinkerbox blue #0f4c8d
Facebook blue #3b5998
LinkedIn light blue #007bb6
Twitter light blue #00aced
Instagra flat blue #517fa4
Tumblr dark flat blue #32506d

To-do 2015 Aug 18
- Remove double error message on application.html and Rails form
- Use SimpleForm
- Allow user to upload profile photo
- Use Sorcery
- Use MailCatcher and SendGrid
- Use Refile

# Learning Resources
http://iwanttolearnruby.com/